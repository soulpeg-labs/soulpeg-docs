const fs = require('fs');
const path = require('path');
const matter = require('gray-matter');

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ .md —Ñ–∞–π–ª—ã
function findMarkdownFiles(dir, files = []) {
  const items = fs.readdirSync(dir);
  
  for (const item of items) {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory()) {
      findMarkdownFiles(fullPath, files);
    } else if (item.endsWith('.md')) {
      files.push(fullPath);
    }
  }
  
  return files;
}

// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ markdown —Ñ–∞–π–ª–æ–≤
function extractSearchData() {
  const contentDir = path.join(__dirname, '../content/docs');
  const mdFiles = findMarkdownFiles(contentDir);
  const searchData = [];
  
  for (const file of mdFiles) {
    const content = fs.readFileSync(file, 'utf-8');
    const { data, content: body } = matter(content);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è slug
    const relativePath = path.relative(contentDir, file);
    const slug = relativePath
      .replace(/\.md$/, '')
      .replace(/\\/g, '/')
      .replace(/index$/, '');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const headings = [];
    const headingRegex = /^#{1,3}\s+(.+)$/gm;
    let match;
    while ((match = headingRegex.exec(body)) !== null) {
      headings.push(match[1]);
    }
    
    searchData.push({
      title: data.title || path.basename(file, '.md'),
      slug: slug || 'index',
      description: data.description || '',
      headings: headings,
      content: body.slice(0, 500) // –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
    });
  }
  
  return searchData;
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
const searchData = extractSearchData();
const outputPath = path.join(__dirname, '../lib/searchData.json');

fs.writeFileSync(
  outputPath,
  JSON.stringify(searchData, null, 2)
);

console.log(`‚úÖ Search index built: ${searchData.length} documents indexed`);
console.log(`üìÅ Output: ${outputPath}`); 